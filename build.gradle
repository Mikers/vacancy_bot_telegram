plugins {
    id 'java'
    id 'application'
    id 'jacoco'
}

group = 'com.skillbox'
version = '1.0.0'

java {
    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
}

repositories {
    mavenCentral()
}

dependencies {
    // Telegram Bot API - Required for bot functionality (Updated to latest)
    implementation 'org.telegram:telegrambots-longpolling:9.0.0'
    implementation 'org.telegram:telegrambots-client:9.0.0'
    implementation 'org.telegram:telegrambots-meta:9.0.0'
    
    // HTTP Client - Modern HTTP client for REST API calls
    implementation 'com.squareup.okhttp3:okhttp:5.1.0'
    
    // JSON Processing - Industry standard JSON library
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.19.0'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.19.0'
    implementation 'com.fasterxml.jackson.module:jackson-module-parameter-names:2.19.0'
    
    // Logging - Standard logging facade with implementation
    implementation 'org.slf4j:slf4j-api:2.0.17'
    implementation 'ch.qos.logback:logback-classic:1.5.18'
    
    // Utilities - Very useful utility libraries (not frameworks)
    implementation 'org.apache.commons:commons-lang3:3.17.0'
    implementation 'commons-io:commons-io:2.18.0'
    implementation 'com.google.guava:guava:33.3.1-jre'
    
    // Validation - Bean validation utilities
    implementation 'jakarta.validation:jakarta.validation-api:3.1.0'
    implementation 'org.hibernate.validator:hibernate-validator:8.0.1.Final'
    implementation 'org.glassfish:jakarta.el:4.0.2'
    
    // Lombok - Code generation library to reduce boilerplate
    compileOnly 'org.projectlombok:lombok:1.18.36'
    annotationProcessor 'org.projectlombok:lombok:1.18.36'
    
    // Testing - Modern testing stack
    testImplementation platform('org.junit:junit-bom:5.11.3')
    testImplementation 'org.junit.jupiter:junit-jupiter'
    testImplementation 'org.mockito:mockito-core:5.14.2'
    testImplementation 'org.mockito:mockito-junit-jupiter:5.14.2'
    testImplementation 'org.assertj:assertj-core:3.26.3'
    testImplementation 'org.awaitility:awaitility:4.2.2'
    testImplementation 'com.squareup.okhttp3:mockwebserver:4.12.0'
    
    testCompileOnly 'org.projectlombok:lombok:1.18.36'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.36'
}

application {
    mainClass = 'com.skillbox.vacancytracker.VacancyTrackerBotApplication'
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
    options.compilerArgs += ['-parameters']
}

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
    
    testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat "full"
    }
}

jacoco {
    toolVersion = "0.8.12"
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required = true
        csv.required = false
        html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
    }
    
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                '**/dto/**',
                '**/config/**',
                '**/VacancyTrackerBotApplication.class'
            ])
        }))
    }
}

jacocoTestCoverageVerification {
    dependsOn jacocoTestReport
    violationRules {
        rule {
            limit {
                minimum = 0.80
            }
        }
    }
}

check.dependsOn jacocoTestCoverageVerification

// Custom task to run the bot
task runBot(type: JavaExec) {
    group = 'application'
    description = 'Run the Vacancy Tracker Bot'
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'com.skillbox.vacancytracker.VacancyTrackerBotApplication'
}